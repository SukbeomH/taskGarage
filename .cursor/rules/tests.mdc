
# Task Garage 테스트 가이드

## **테스트 아키텍처**

### **테스트 구조**
```
tests/
├── unit/                    # 단위 테스트
│   ├── task-manager/       # 태스크 관리 모듈 테스트
│   ├── ai-providers/       # AI 제공자 테스트
│   ├── cli/                # CLI 명령어 테스트
│   └── mcp/                # MCP 도구 테스트
├── integration/            # 통합 테스트
│   ├── cli/                # CLI 통합 테스트
│   ├── mcp-server/         # MCP 서버 통합 테스트
│   └── profiles/           # 프로필 통합 테스트
├── e2e/                    # 엔드투엔드 테스트
├── fixtures/               # 테스트 데이터
└── utils/                  # 테스트 유틸리티
```

### **테스트 설정**
```javascript
// ✅ DO: jest.config.js 표준 설정
module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    roots: ['<rootDir>/src', '<rootDir>/tests'],
    testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
    transform: {
        '^.+\\.ts$': 'ts-jest'
    },
    collectCoverage: true,
    coverageDirectory: 'coverage',
    coverageReporters: ['text', 'lcov', 'html'],
    coverageThreshold: {
        global: {
            branches: 70,
            functions: 80,
            lines: 80,
            statements: 80
        }
    },
    setupFilesAfterEnv: ['<rootDir>/tests/setup.ts']
};
```

## **단위 테스트 패턴**

### **태스크 관리 모듈 테스트**
```javascript
// ✅ DO: tests/unit/task-manager/add-task.test.js
import { addTask } from '../../../scripts/modules/task-manager/add-task.js';
import { findTaskById } from '../../../scripts/modules/task-manager/task-manager.js';
import { generateTextService } from '../../../scripts/modules/ai-services-unified.js';

// 모킹 설정
jest.mock('../../../scripts/modules/ai-services-unified.js');
jest.mock('../../../scripts/modules/task-manager/task-manager.js');

describe('Add Task', () => {
    let mockTasksPath;
    let mockTasksData;
    
    beforeEach(() => {
        jest.clearAllMocks();
        
        mockTasksPath = '/path/to/tasks.json';
        mockTasksData = {
            tasks: [
                { id: '1', title: 'Existing Task', status: 'pending' }
            ]
        };
        
        // 파일 시스템 모킹
        jest.spyOn(fs, 'readFileSync').mockReturnValue(JSON.stringify(mockTasksData));
        jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {});
    });
    
    it('should add task successfully', async () => {
        // AI 서비스 모킹
        const mockAiResponse = {
            mainResult: {
                title: 'New Task',
                description: 'Task description',
                details: 'Implementation details',
                testStrategy: 'Test approach'
            },
            telemetryData: { tokens: 100, cost: 0.001 }
        };
        
        generateTextService.mockResolvedValue(mockAiResponse);
        
        // 테스트 실행
        const result = await addTask(mockTasksPath, 'Create a new feature', {
            priority: 'high',
            dependencies: ['1']
        });
        
        // 검증
        expect(result.success).toBe(true);
        expect(result.data.id).toBe('2'); // 다음 ID
        expect(result.data.title).toBe('New Task');
        expect(result.data.dependencies).toEqual(['1']);
        expect(result.data.priority).toBe('high');
        
        // AI 서비스 호출 검증
        expect(generateTextService).toHaveBeenCalledWith({
            prompt: expect.stringContaining('Create a new feature'),
            model: expect.any(String),
            commandName: 'add-task',
            outputType: 'cli'
        });
        
        // 파일 저장 검증
        expect(fs.writeFileSync).toHaveBeenCalledWith(
            mockTasksPath,
            expect.stringContaining('"id": "2"')
        );
    });
    
    it('should handle AI service errors', async () => {
        generateTextService.mockRejectedValue(new Error('AI service error'));
        
        await expect(addTask(mockTasksPath, 'Test task'))
            .rejects.toThrow('AI service error');
    });
    
    it('should validate input parameters', async () => {
        await expect(addTask(mockTasksPath, ''))
            .rejects.toThrow('태스크 설명이 필요합니다');
        
        await expect(addTask(mockTasksPath, null))
            .rejects.toThrow('태스크 설명이 필요합니다');
    });
    
    it('should handle file system errors', async () => {
        fs.readFileSync.mockImplementation(() => {
            throw new Error('File not found');
        });
        
        await expect(addTask(mockTasksPath, 'Test task'))
            .rejects.toThrow('File not found');
    });
});
```

### **AI 제공자 테스트**
```javascript
// ✅ DO: tests/unit/ai-providers/anthropic.test.js
import { AnthropicProvider } from '../../../src/ai-providers/anthropic.js';

describe('Anthropic Provider', () => {
    let provider;
    
    beforeEach(() => {
        provider = new AnthropicProvider({
            apiKey: 'test-key'
        });
    });
    
    it('should generate text successfully', async () => {
        // Vercel AI SDK 모킹
        const mockGenerateText = jest.fn().mockResolvedValue({
            text: 'Generated response',
            usage: { totalTokens: 100 }
        });
        
        jest.doMock('@ai-sdk/vercel', () => ({
            generateText: mockGenerateText
        }));
        
        const result = await provider.generateText({
            prompt: 'Test prompt',
            model: 'claude-3-sonnet-20240229',
            maxTokens: 1000,
            temperature: 0.7
        });
        
        expect(result.text).toBe('Generated response');
        expect(result.usage.totalTokens).toBe(100);
        expect(mockGenerateText).toHaveBeenCalledWith({
            model: 'anthropic:claude-3-sonnet-20240229',
            prompt: 'Test prompt',
            max_tokens: 1000,
            temperature: 0.7
        });
    });
    
    it('should handle API errors', async () => {
        const mockGenerateText = jest.fn().mockRejectedValue({
            code: 'rate_limit_exceeded',
            message: 'Rate limit exceeded'
        });
        
        jest.doMock('@ai-sdk/vercel', () => ({
            generateText: mockGenerateText
        }));
        
        await expect(provider.generateText({
            prompt: 'Test prompt',
            model: 'claude-3-sonnet-20240229'
        })).rejects.toThrow('Rate limit exceeded');
    });
    
    it('should validate model support', () => {
        expect(provider.isModelSupported('claude-3-sonnet-20240229')).toBe(true);
        expect(provider.isModelSupported('unsupported-model')).toBe(false);
    });
});
```

### **CLI 명령어 테스트**
```javascript
// ✅ DO: tests/unit/cli/commands.test.js
import { execSync } from 'child_process';
import path from 'path';

describe('CLI Commands', () => {
    const testProjectPath = path.join(__dirname, '../../fixtures/test-project');
    
    beforeEach(() => {
        setupTestProject(testProjectPath);
    });
    
    afterEach(() => {
        cleanupTestProject(testProjectPath);
    });
    
    it('should initialize project successfully', () => {
        const result = execSync(
            'task-master init --name="Test Project" --yes',
            { cwd: testProjectPath, encoding: 'utf8' }
        );
        
        expect(result).toContain('Task Garage 프로젝트가 초기화되었습니다');
        expect(fs.existsSync(path.join(testProjectPath, '.taskmaster'))).toBe(true);
    });
    
    it('should add task successfully', () => {
        // 먼저 프로젝트 초기화
        execSync('task-master init --yes', { cwd: testProjectPath });
        
        const result = execSync(
            'task-master add-task --prompt="Create a test task"',
            { cwd: testProjectPath, encoding: 'utf8' }
        );
        
        expect(result).toContain('태스크가 성공적으로 추가되었습니다');
        
        // 태스크 파일 확인
        const tasksPath = path.join(testProjectPath, '.taskmaster', 'tasks', 'tasks.json');
        const tasksData = JSON.parse(fs.readFileSync(tasksPath, 'utf8'));
        expect(tasksData.tasks).toHaveLength(1);
        expect(tasksData.tasks[0].title).toContain('test task');
    });
    
    it('should handle invalid commands', () => {
        expect(() => {
            execSync('task-master invalid-command', { 
                cwd: testProjectPath, 
                encoding: 'utf8' 
            });
        }).toThrow();
    });
    
    it('should display help information', () => {
        const result = execSync('task-master --help', { 
            cwd: testProjectPath, 
            encoding: 'utf8' 
        });
        
        expect(result).toContain('Usage: task-master');
        expect(result).toContain('Commands:');
        expect(result).toContain('add-task');
    });
});
```

## **통합 테스트 패턴**

### **MCP 서버 통합 테스트**
```javascript
// ✅ DO: tests/integration/mcp-server/direct-functions.test.js
import { FastMCP } from '@modelcontextprotocol/sdk/server/fastmcp';
import { addTaskDirect } from '../../../mcp-server/src/core/direct-functions/add-task.js';

describe('MCP Direct Functions Integration', () => {
    let server;
    let mockLog;
    
    beforeEach(() => {
        server = new FastMCP({
            name: 'test-mcp-server',
            version: '1.0.0'
        });
        
        mockLog = {
            info: jest.fn(),
            error: jest.fn(),
            warn: jest.fn()
        };
    });
    
    it('should add task via MCP direct function', async () => {
        const mockTasksPath = '/path/to/tasks.json';
        const mockTasksData = { tasks: [] };
        
        // 파일 시스템 모킹
        jest.spyOn(fs, 'readFileSync').mockReturnValue(JSON.stringify(mockTasksData));
        jest.spyOn(fs, 'writeFileSync').mockImplementation(() => {});
        
        // AI 서비스 모킹
        jest.spyOn(generateTextService, 'mockResolvedValue').mockResolvedValue({
            mainResult: {
                title: 'MCP Test Task',
                description: 'Test description'
            },
            telemetryData: { tokens: 50, cost: 0.0005 }
        });
        
        const result = await addTaskDirect({
            projectRoot: '/test/project',
            prompt: 'Create a test task via MCP'
        }, mockLog, { session: {} });
        
        expect(result.success).toBe(true);
        expect(result.data.title).toBe('MCP Test Task');
        expect(mockLog.info).toHaveBeenCalled();
    });
    
    it('should handle MCP context properly', async () => {
        const mockSession = {
            env: {
                ANTHROPIC_API_KEY: 'test-key'
            }
        };
        
        const result = await addTaskDirect({
            projectRoot: '/test/project',
            prompt: 'Test task'
        }, mockLog, { session: mockSession });
        
        // 세션 정보가 올바르게 전달되었는지 확인
        expect(result.success).toBe(true);
    });
});
```

### **프로필 통합 테스트**
```javascript
// ✅ DO: tests/integration/profiles/claude-integration.test.js
import { ClaudeProfile } from '../../../src/profiles/claude.js';
import { generateTextService } from '../../../scripts/modules/ai-services-unified.js';

describe('Claude Profile Integration', () => {
    let profile;
    
    beforeEach(() => {
        profile = new ClaudeProfile();
        jest.clearAllMocks();
    });
    
    it('should initialize with Claude configuration', async () => {
        const config = await profile.initialize({
            projectName: 'Test Project',
            projectDescription: 'Test Description'
        });
        
        expect(config.provider).toBe('anthropic');
        expect(config.model).toContain('claude');
        expect(config.maxTokens).toBeGreaterThan(0);
    });
    
    it('should generate tasks using Claude', async () => {
        const mockAiResponse = {
            mainResult: {
                tasks: [
                    {
                        id: '1',
                        title: 'Setup Project',
                        description: 'Initialize the project structure'
                    }
                ]
            },
            telemetryData: { tokens: 200, cost: 0.002 }
        };
        
        generateTextService.mockResolvedValue(mockAiResponse);
        
        const tasks = await profile.generateTasks({
            prompt: 'Create a simple web application',
            numTasks: 1
        });
        
        expect(tasks).toHaveLength(1);
        expect(tasks[0].title).toBe('Setup Project');
        expect(generateTextService).toHaveBeenCalledWith({
            prompt: expect.stringContaining('Create a simple web application'),
            model: expect.stringContaining('claude'),
            commandName: 'generate-tasks'
        });
    });
});
```

## **엔드투엔드 테스트**

### **전체 워크플로우 테스트**
```javascript
// ✅ DO: tests/e2e/workflow.test.js
import { execSync } from 'child_process';
import path from 'path';

describe('End-to-End Workflow', () => {
    const testProjectPath = path.join(__dirname, '../fixtures/e2e-project');
    
    beforeAll(() => {
        setupE2EProject(testProjectPath);
    });
    
    afterAll(() => {
        cleanupE2EProject(testProjectPath);
    });
    
    it('should complete full task management workflow', async () => {
        // 1. 프로젝트 초기화
        execSync('task-master init --name="E2E Test" --yes', { 
            cwd: testProjectPath 
        });
        
        // 2. PRD 파싱
        const prdContent = `
        # Test Project PRD
        
        ## Overview
        Create a simple task management application.
        
        ## Features
        - Add tasks
        - Mark tasks as complete
        - List all tasks
        `;
        
        fs.writeFileSync(path.join(testProjectPath, 'prd.txt'), prdContent);
        
        execSync('task-master parse-prd prd.txt', { cwd: testProjectPath });
        
        // 3. 태스크 목록 확인
        const listResult = execSync('task-master list', { 
            cwd: testProjectPath, 
            encoding: 'utf8' 
        });
        
        expect(listResult).toContain('Add tasks');
        expect(listResult).toContain('Mark tasks as complete');
        
        // 4. 태스크 확장
        execSync('task-master expand --id=1', { cwd: testProjectPath });
        
        // 5. 태스크 상태 변경
        execSync('task-master set-status --id=1.1 --status=done', { 
            cwd: testProjectPath 
        });
        
        // 6. 최종 상태 확인
        const finalResult = execSync('task-master list', { 
            cwd: testProjectPath, 
            encoding: 'utf8' 
        });
        
        expect(finalResult).toContain('✅ 1.1'); // 완료된 서브태스크
    }, 30000); // 30초 타임아웃
    
    it('should handle MCP integration workflow', async () => {
        // MCP 서버 시작
        const mcpServer = startMCPServer(testProjectPath);
        
        try {
            // MCP 도구를 통한 태스크 추가
            const mcpResult = await callMCPTool('add_task', {
                projectRoot: testProjectPath,
                prompt: 'Test task via MCP'
            });
            
            expect(mcpResult.success).toBe(true);
            expect(mcpResult.data.title).toContain('Test task');
            
            // CLI를 통한 태스크 목록 확인
            const listResult = execSync('task-master list', { 
                cwd: testProjectPath, 
                encoding: 'utf8' 
            });
            
            expect(listResult).toContain('Test task via MCP');
        } finally {
            mcpServer.stop();
        }
    });
});
```

## **테스트 유틸리티**

### **테스트 헬퍼 함수**
```javascript
// ✅ DO: tests/utils/test-helpers.js
export function setupTestProject(projectPath) {
    // 테스트 프로젝트 디렉토리 생성
    if (!fs.existsSync(projectPath)) {
        fs.mkdirSync(projectPath, { recursive: true });
    }
    
    // 기본 파일 생성
    fs.writeFileSync(path.join(projectPath, 'package.json'), JSON.stringify({
        name: 'test-project',
        version: '1.0.0'
    }));
}

export function cleanupTestProject(projectPath) {
    if (fs.existsSync(projectPath)) {
        fs.rmSync(projectPath, { recursive: true, force: true });
    }
}

export function createMockTasks(tasks) {
    return {
        tasks: tasks.map((task, index) => ({
            id: (index + 1).toString(),
            title: task.title || `Task ${index + 1}`,
            description: task.description || `Description for task ${index + 1}`,
            status: task.status || 'pending',
            priority: task.priority || 'medium',
            dependencies: task.dependencies || [],
            details: task.details || '',
            testStrategy: task.testStrategy || '',
            subtasks: task.subtasks || [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        }))
    };
}

export function mockFileSystem(tasksData, projectPath) {
    const tasksPath = path.join(projectPath, '.taskmaster', 'tasks', 'tasks.json');
    
    // 디렉토리 생성
    fs.mkdirSync(path.dirname(tasksPath), { recursive: true });
    
    // 태스크 파일 생성
    fs.writeFileSync(tasksPath, JSON.stringify(tasksData, null, 2));
    
    return tasksPath;
}

export function createMockAIResponse(response) {
    return {
        mainResult: response,
        telemetryData: {
            inputTokens: 100,
            outputTokens: 200,
            totalTokens: 300,
            totalCost: 0.003,
            currency: 'USD'
        }
    };
}
```

### **모킹 유틸리티**
```javascript
// ✅ DO: tests/utils/mock-utilities.js
export function mockFileSystem() {
    const mockFs = {
        readFileSync: jest.fn(),
        writeFileSync: jest.fn(),
        existsSync: jest.fn(),
        mkdirSync: jest.fn(),
        rmSync: jest.fn()
    };
    
    jest.doMock('fs', () => mockFs);
    
    return mockFs;
}

export function mockAIService() {
    const mockGenerateTextService = jest.fn();
    const mockGenerateObjectService = jest.fn();
    
    jest.doMock('../../../scripts/modules/ai-services-unified.js', () => ({
        generateTextService: mockGenerateTextService,
        generateObjectService: mockGenerateObjectService
    }));
    
    return {
        generateTextService: mockGenerateTextService,
        generateObjectService: mockGenerateObjectService
    };
}

export function mockTaskManager() {
    const mockFindTaskById = jest.fn();
    const mockUpdateTask = jest.fn();
    const mockAddTask = jest.fn();
    
    jest.doMock('../../../scripts/modules/task-manager/task-manager.js', () => ({
        findTaskById: mockFindTaskById,
        updateTask: mockUpdateTask,
        addTask: mockAddTask
    }));
    
    return {
        findTaskById: mockFindTaskById,
        updateTask: mockUpdateTask,
        addTask: mockAddTask
    };
}
```

## **테스트 실행 및 커버리지**

### **테스트 스크립트**
```json
// ✅ DO: package.json 테스트 스크립트
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:unit": "jest --testPathPattern=tests/unit",
    "test:integration": "jest --testPathPattern=tests/integration",
    "test:e2e": "jest --testPathPattern=tests/e2e",
    "test:ci": "jest --ci --coverage --watchAll=false"
  }
}
```

### **커버리지 설정**
```javascript
// ✅ DO: 커버리지 임계값 설정
const coverageThreshold = {
    global: {
        branches: 70,
        functions: 80,
        lines: 80,
        statements: 80
    },
    './scripts/modules/task-manager/': {
        branches: 85,
        functions: 90,
        lines: 90,
        statements: 90
    },
    './scripts/modules/ai-services-unified.js': {
        branches: 80,
        functions: 85,
        lines: 85,
        statements: 85
    }
};
```

## **테스트 모범 사례**

### **테스트 작성 원칙**
```javascript
// ✅ DO: 테스트 작성 모범 사례
describe('Task Management', () => {
    // 1. 명확한 테스트 설명
    it('should add task with valid input and return success response', async () => {
        // 2. Given-When-Then 구조
        // Given: 테스트 데이터 준비
        const mockTasksPath = '/path/to/tasks.json';
        const mockPrompt = 'Create a new feature';
        
        // When: 테스트 실행
        const result = await addTask(mockTasksPath, mockPrompt);
        
        // Then: 결과 검증
        expect(result.success).toBe(true);
        expect(result.data.title).toContain('new feature');
    });
    
    // 3. 에러 케이스 테스트
    it('should throw error when prompt is empty', async () => {
        await expect(addTask('/path/to/tasks.json', ''))
            .rejects.toThrow('태스크 설명이 필요합니다');
    });
    
    // 4. 경계값 테스트
    it('should handle very long prompt', async () => {
        const longPrompt = 'a'.repeat(10000);
        const result = await addTask('/path/to/tasks.json', longPrompt);
        expect(result.success).toBe(true);
    });
    
    // 5. 비동기 작업 테스트
    it('should handle concurrent task additions', async () => {
        const promises = Array(5).fill().map((_, i) => 
            addTask('/path/to/tasks.json', `Task ${i}`)
        );
        
        const results = await Promise.all(promises);
        expect(results.every(r => r.success)).toBe(true);
    });
});
```

### **테스트 데이터 관리**
```javascript
// ✅ DO: 테스트 데이터 관리
const TEST_TASKS = {
    simple: [
        { title: 'Simple Task', status: 'pending' }
    ],
    complex: [
        { 
            title: 'Complex Task', 
            status: 'in-progress',
            dependencies: ['1'],
            subtasks: [
                { title: 'Subtask 1', status: 'done' },
                { title: 'Subtask 2', status: 'pending' }
            ]
        }
    ],
    withDependencies: [
        { id: '1', title: 'Task 1', status: 'done' },
        { id: '2', title: 'Task 2', status: 'pending', dependencies: ['1'] },
        { id: '3', title: 'Task 3', status: 'pending', dependencies: ['2'] }
    ]
};

export function getTestTasks(type = 'simple') {
    return TEST_TASKS[type] || TEST_TASKS.simple;
}
```

---

**참고 파일:**
- [tests/](mdc:tests/) - 테스트 디렉토리
- [jest.config.js](mdc:jest.config.js) - Jest 설정
- [package.json](mdc:package.json) - 테스트 스크립트
- [scripts/modules/](mdc:scripts/modules/) - 테스트 대상 모듈 
    testLog('info', 'test message');
    expect(mockConsole).toHaveBeenCalledWith('info', 'test message');
  });
  ``` 